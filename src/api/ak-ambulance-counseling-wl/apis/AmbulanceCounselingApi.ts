/* tslint:disable */
/* eslint-disable */
/**
 * Waiting List Api
 * Ambulance Counseling Project API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: xkoricansky@stuba.sk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Question,
  Reply,
} from '../models';
import {
    QuestionFromJSON,
    QuestionToJSON,
    ReplyFromJSON,
    ReplyToJSON,
} from '../models';

export interface CreateQuestionRequest {
    question: Question;
}

export interface DeleteQuestionByIdRequest {
    id: string;
}

export interface DeleteReplyByIdRequest {
    id: string;
}

export interface GetQuestionByIdRequest {
    id: string;
}

export interface GetRepliesByQuestionIdRequest {
    id: string;
}

export interface GetReplyByIdRequest {
    id: string;
    replyId: string;
}

export interface ReplyToQuestionRequest {
    id: string;
    reply: Reply;
}

export interface UpdateQuestionByIdRequest {
    id: string;
    question: Question;
}

export interface UpdateReplyByIdRequest {
    id: string;
    reply: Reply;
}

/**
 * AmbulanceCounselingApi - interface
 * 
 * @export
 * @interface AmbulanceCounselingApiInterface
 */
export interface AmbulanceCounselingApiInterface {
    /**
     * 
     * @summary Create a new question
     * @param {Question} question 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceCounselingApiInterface
     */
    createQuestionRaw(requestParameters: CreateQuestionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Create a new question
     */
    createQuestion(requestParameters: CreateQuestionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Delete a question by ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceCounselingApiInterface
     */
    deleteQuestionByIdRaw(requestParameters: DeleteQuestionByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a question by ID
     */
    deleteQuestionById(requestParameters: DeleteQuestionByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Delete a reply by ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceCounselingApiInterface
     */
    deleteReplyByIdRaw(requestParameters: DeleteReplyByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a reply by ID
     */
    deleteReplyById(requestParameters: DeleteReplyByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Get a specific question by ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceCounselingApiInterface
     */
    getQuestionByIdRaw(requestParameters: GetQuestionByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Question>>;

    /**
     * Get a specific question by ID
     */
    getQuestionById(requestParameters: GetQuestionByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Question>;

    /**
     * Retrieve a list of all question summaries submitted by patients
     * @summary Get all question summaries
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceCounselingApiInterface
     */
    getQuestionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Question>>>;

    /**
     * Retrieve a list of all question summaries submitted by patients
     * Get all question summaries
     */
    getQuestions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Question>>;

    /**
     * 
     * @summary Get all replies for a specific question
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceCounselingApiInterface
     */
    getRepliesByQuestionIdRaw(requestParameters: GetRepliesByQuestionIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Reply>>>;

    /**
     * Get all replies for a specific question
     */
    getRepliesByQuestionId(requestParameters: GetRepliesByQuestionIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Reply>>;

    /**
     * 
     * @summary Get a specific reply by ID
     * @param {string} id 
     * @param {string} replyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceCounselingApiInterface
     */
    getReplyByIdRaw(requestParameters: GetReplyByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reply>>;

    /**
     * Get a specific reply by ID
     */
    getReplyById(requestParameters: GetReplyByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reply>;

    /**
     * 
     * @summary Reply to a question
     * @param {string} id 
     * @param {Reply} reply 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceCounselingApiInterface
     */
    replyToQuestionRaw(requestParameters: ReplyToQuestionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Reply to a question
     */
    replyToQuestion(requestParameters: ReplyToQuestionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Update a question by ID
     * @param {string} id 
     * @param {Question} question 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceCounselingApiInterface
     */
    updateQuestionByIdRaw(requestParameters: UpdateQuestionByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Update a question by ID
     */
    updateQuestionById(requestParameters: UpdateQuestionByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Update a reply by ID
     * @param {string} id 
     * @param {Reply} reply 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceCounselingApiInterface
     */
    updateReplyByIdRaw(requestParameters: UpdateReplyByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Update a reply by ID
     */
    updateReplyById(requestParameters: UpdateReplyByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class AmbulanceCounselingApi extends runtime.BaseAPI implements AmbulanceCounselingApiInterface {

    /**
     * Create a new question
     */
    async createQuestionRaw(requestParameters: CreateQuestionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.question === null || requestParameters.question === undefined) {
            throw new runtime.RequiredError('question','Required parameter requestParameters.question was null or undefined when calling createQuestion.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/questions/new`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QuestionToJSON(requestParameters.question),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a new question
     */
    async createQuestion(requestParameters: CreateQuestionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createQuestionRaw(requestParameters, initOverrides);
    }

    /**
     * Delete a question by ID
     */
    async deleteQuestionByIdRaw(requestParameters: DeleteQuestionByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteQuestionById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/delete/question/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a question by ID
     */
    async deleteQuestionById(requestParameters: DeleteQuestionByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteQuestionByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Delete a reply by ID
     */
    async deleteReplyByIdRaw(requestParameters: DeleteReplyByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteReplyById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/delete/reply/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a reply by ID
     */
    async deleteReplyById(requestParameters: DeleteReplyByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteReplyByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Get a specific question by ID
     */
    async getQuestionByIdRaw(requestParameters: GetQuestionByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Question>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getQuestionById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/questions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuestionFromJSON(jsonValue));
    }

    /**
     * Get a specific question by ID
     */
    async getQuestionById(requestParameters: GetQuestionByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Question> {
        const response = await this.getQuestionByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of all question summaries submitted by patients
     * Get all question summaries
     */
    async getQuestionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Question>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/questions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(QuestionFromJSON));
    }

    /**
     * Retrieve a list of all question summaries submitted by patients
     * Get all question summaries
     */
    async getQuestions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Question>> {
        const response = await this.getQuestionsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get all replies for a specific question
     */
    async getRepliesByQuestionIdRaw(requestParameters: GetRepliesByQuestionIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Reply>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRepliesByQuestionId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/questions/{id}/replies`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ReplyFromJSON));
    }

    /**
     * Get all replies for a specific question
     */
    async getRepliesByQuestionId(requestParameters: GetRepliesByQuestionIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Reply>> {
        const response = await this.getRepliesByQuestionIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a specific reply by ID
     */
    async getReplyByIdRaw(requestParameters: GetReplyByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reply>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getReplyById.');
        }

        if (requestParameters.replyId === null || requestParameters.replyId === undefined) {
            throw new runtime.RequiredError('replyId','Required parameter requestParameters.replyId was null or undefined when calling getReplyById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/questions/{id}/reply/{replyId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"replyId"}}`, encodeURIComponent(String(requestParameters.replyId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReplyFromJSON(jsonValue));
    }

    /**
     * Get a specific reply by ID
     */
    async getReplyById(requestParameters: GetReplyByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reply> {
        const response = await this.getReplyByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reply to a question
     */
    async replyToQuestionRaw(requestParameters: ReplyToQuestionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling replyToQuestion.');
        }

        if (requestParameters.reply === null || requestParameters.reply === undefined) {
            throw new runtime.RequiredError('reply','Required parameter requestParameters.reply was null or undefined when calling replyToQuestion.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/questions/{id}/reply`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReplyToJSON(requestParameters.reply),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Reply to a question
     */
    async replyToQuestion(requestParameters: ReplyToQuestionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.replyToQuestionRaw(requestParameters, initOverrides);
    }

    /**
     * Update a question by ID
     */
    async updateQuestionByIdRaw(requestParameters: UpdateQuestionByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateQuestionById.');
        }

        if (requestParameters.question === null || requestParameters.question === undefined) {
            throw new runtime.RequiredError('question','Required parameter requestParameters.question was null or undefined when calling updateQuestionById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/update/question/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: QuestionToJSON(requestParameters.question),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update a question by ID
     */
    async updateQuestionById(requestParameters: UpdateQuestionByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateQuestionByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Update a reply by ID
     */
    async updateReplyByIdRaw(requestParameters: UpdateReplyByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateReplyById.');
        }

        if (requestParameters.reply === null || requestParameters.reply === undefined) {
            throw new runtime.RequiredError('reply','Required parameter requestParameters.reply was null or undefined when calling updateReplyById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/update/reply/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReplyToJSON(requestParameters.reply),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update a reply by ID
     */
    async updateReplyById(requestParameters: UpdateReplyByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateReplyByIdRaw(requestParameters, initOverrides);
    }

}
