/* tslint:disable */
/* eslint-disable */
/**
 * Waiting List Api
 * Ambulance Counseling Project API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: xkoricansky@stuba.sk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LoginForm,
  RegistrationForm,
  UserLogin200Response,
} from '../models';
import {
    LoginFormFromJSON,
    LoginFormToJSON,
    RegistrationFormFromJSON,
    RegistrationFormToJSON,
    UserLogin200ResponseFromJSON,
    UserLogin200ResponseToJSON,
} from '../models';

export interface UserLoginRequest {
    loginForm: LoginForm;
}

export interface UserRegisterRequest {
    registrationForm: RegistrationForm;
}

/**
 * AmbulanceCounselingAuthApi - interface
 * 
 * @export
 * @interface AmbulanceCounselingAuthApiInterface
 */
export interface AmbulanceCounselingAuthApiInterface {
    /**
     * 
     * @summary User login
     * @param {LoginForm} loginForm 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceCounselingAuthApiInterface
     */
    userLoginRaw(requestParameters: UserLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserLogin200Response>>;

    /**
     * User login
     */
    userLogin(requestParameters: UserLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserLogin200Response>;

    /**
     * 
     * @summary User registration
     * @param {RegistrationForm} registrationForm 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceCounselingAuthApiInterface
     */
    userRegisterRaw(requestParameters: UserRegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * User registration
     */
    userRegister(requestParameters: UserRegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class AmbulanceCounselingAuthApi extends runtime.BaseAPI implements AmbulanceCounselingAuthApiInterface {

    /**
     * User login
     */
    async userLoginRaw(requestParameters: UserLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserLogin200Response>> {
        if (requestParameters.loginForm === null || requestParameters.loginForm === undefined) {
            throw new runtime.RequiredError('loginForm','Required parameter requestParameters.loginForm was null or undefined when calling userLogin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginFormToJSON(requestParameters.loginForm),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserLogin200ResponseFromJSON(jsonValue));
    }

    /**
     * User login
     */
    async userLogin(requestParameters: UserLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserLogin200Response> {
        const response = await this.userLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User registration
     */
    async userRegisterRaw(requestParameters: UserRegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.registrationForm === null || requestParameters.registrationForm === undefined) {
            throw new runtime.RequiredError('registrationForm','Required parameter requestParameters.registrationForm was null or undefined when calling userRegister.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegistrationFormToJSON(requestParameters.registrationForm),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User registration
     */
    async userRegister(requestParameters: UserRegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userRegisterRaw(requestParameters, initOverrides);
    }

}
