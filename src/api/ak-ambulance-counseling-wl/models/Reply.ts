/* tslint:disable */
/* eslint-disable */
/**
 * Waiting List Api
 * Ambulance Counseling Project API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: xkoricansky@stuba.sk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Reply
 */
export interface Reply {
    /**
     * Unique identifier for the reply
     * @type {string}
     * @memberof Reply
     */
    id: string;
    /**
     * Unique identifier for the user who made the reply
     * @type {string}
     * @memberof Reply
     */
    userId: string;
    /**
     * The text of the reply
     * @type {string}
     * @memberof Reply
     */
    text: string;
    /**
     * Timestamp when the reply was created
     * @type {Date}
     * @memberof Reply
     */
    createdAt: Date;
    /**
     * Indicates if there is another reply to the question, if true reply cannot be edited or deleted
     * @type {boolean}
     * @memberof Reply
     */
    repliedTo: boolean;
    /**
     * If the reply is from a doctor, this field contains the doctor's name
     * @type {string}
     * @memberof Reply
     */
    doctorName?: string;
}

/**
 * Check if a given object implements the Reply interface.
 */
export function instanceOfReply(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "userId" in value;
    isInstance = isInstance && "text" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "repliedTo" in value;

    return isInstance;
}

export function ReplyFromJSON(json: any): Reply {
    return ReplyFromJSONTyped(json, false);
}

export function ReplyFromJSONTyped(json: any, ignoreDiscriminator: boolean): Reply {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'userId': json['userId'],
        'text': json['text'],
        'createdAt': (new Date(json['createdAt'])),
        'repliedTo': json['repliedTo'],
        'doctorName': !exists(json, 'doctorName') ? undefined : json['doctorName'],
    };
}

export function ReplyToJSON(value?: Reply | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'userId': value.userId,
        'text': value.text,
        'createdAt': (value.createdAt.toISOString()),
        'repliedTo': value.repliedTo,
        'doctorName': value.doctorName,
    };
}

