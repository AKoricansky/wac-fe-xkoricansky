/* tslint:disable */
/* eslint-disable */
/**
 * Waiting List Api
 * Ambulance Counseling Project API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: xkoricansky@stuba.sk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Reply } from './Reply';
import {
    ReplyFromJSON,
    ReplyFromJSONTyped,
    ReplyToJSON,
} from './Reply';

/**
 * 
 * @export
 * @interface Question
 */
export interface Question {
    /**
     * Unique identifier for the question
     * @type {string}
     * @memberof Question
     */
    id: string;
    /**
     * Unique identifier for the patient who submitted the question
     * @type {string}
     * @memberof Question
     */
    patientId: string;
    /**
     * A brief summary of the question
     * @type {string}
     * @memberof Question
     */
    summary: string;
    /**
     * The question text submitted by the patient
     * @type {string}
     * @memberof Question
     */
    question: string;
    /**
     * List of replies to the question if any
     * @type {Array<Reply>}
     * @memberof Question
     */
    replies?: Array<Reply>;
    /**
     * Timestamp when the question was created
     * @type {Date}
     * @memberof Question
     */
    createdAt: Date;
    /**
     * Timestamp when the question was last updated
     * @type {Date}
     * @memberof Question
     */
    lastUpdated: Date;
    /**
     * Indicates if the question has been replied to, if true question cannot be edited
     * @type {boolean}
     * @memberof Question
     */
    repliedTo: boolean;
}

/**
 * Check if a given object implements the Question interface.
 */
export function instanceOfQuestion(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "patientId" in value;
    isInstance = isInstance && "summary" in value;
    isInstance = isInstance && "question" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "lastUpdated" in value;
    isInstance = isInstance && "repliedTo" in value;

    return isInstance;
}

export function QuestionFromJSON(json: any): Question {
    return QuestionFromJSONTyped(json, false);
}

export function QuestionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Question {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'patientId': json['patientId'],
        'summary': json['summary'],
        'question': json['question'],
        'replies': !exists(json, 'replies') ? undefined : ((json['replies'] as Array<any>).map(ReplyFromJSON)),
        'createdAt': (new Date(json['createdAt'])),
        'lastUpdated': (new Date(json['lastUpdated'])),
        'repliedTo': json['repliedTo'],
    };
}

export function QuestionToJSON(value?: Question | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'patientId': value.patientId,
        'summary': value.summary,
        'question': value.question,
        'replies': value.replies === undefined ? undefined : ((value.replies as Array<any>).map(ReplyToJSON)),
        'createdAt': (value.createdAt.toISOString()),
        'lastUpdated': (value.lastUpdated.toISOString()),
        'repliedTo': value.repliedTo,
    };
}

